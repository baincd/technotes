################################################################################
# # Chris' Awesome Git Config                                                  #
#                                                                              #
# A very useful and helpful git configuration.                                 #
#                                                                              #
# IMPORTANT: See below for git configuration settings that are unique to the   #
# workstation, and configure these directly in ~/.gitconfig                    #
#                                                                              #
# ## Setup Option 1: Import into ~/.gitconfig                                  #
#                                                                              #
# 1. Create `~/.git.gitconfig`                                                 #
#    a. Create symbolic link with following command                            #
#     `ln -s ~/wc/technotes/git/setup-git.gitconfig ~/.git.gitconfig`          #
#    b. OR Save this file to `~/.git.gitconfig`                                #
#                                                                              #
# 2. Add to ~/.gitconfig:                                                      #
# ```                                                                          #
# [include]                                                                    #
#     path = ~/.git.gitconfig                                                  #
# ```                                                                          #
#                                                                              #
# ## Setup Option 2: Copy contents directly into ~/.gitconfig                  #
################################################################################

########################################
# The following are settings are       #
# unique for each workstation and must #
# be configured directly in            #
# ~/.gitconfig                         #
########################################
# [user]
# 	name = Your Name
# 	email = yourname@example.com
# [core]
# 	# Choose editor
# 	## Windows editors
# 	editor = 'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin
# 	editor = 'C:/Program Files (x86)/Atom/resources/cli/atom.cmd' --new-window --wait
#	editor = 'C:/Program Files (x86)/Microsoft VS Code/Code.exe' --log off --new-window /home/chris/default.code-workspace --wait  # Open in specific workspace (if workspace already open then add new editor tab; else open workspace with only new editor tab; window does not close when new editor tab is closed)
#	editor = 'C:/Program Files (x86)/Microsoft VS Code/Code.exe' --log off --wait  # If vscode already open then add new editor tab and do not close window when new editor tab is closed; else open in new window and close window when new editor tab is closed
# 	## Linux / Bash editors
# 	editor = vi
# 	editor = atom --wait
#	editor = code --log off --new-window --wait  # Open in a new window, close window when editor tab is closed
# [credential]
# 	# Windows http - Use windows to cache credentials
# 	helper = wincred
## OR
# 	# Linux http- use git cache to cache credentials (change timeout from default 15 mins to 60 mins)
# 	helper = cache --timeout=3600 # change the timeout from the default 15 mins to 60 mins
# 	# ssh - use ssh-cache alias

###

[core]
	# Disable long line wrap
	pager = less -S
	# Global git ignore file
	# https://docs.github.com/en/github/getting-started-with-github/ignoring-files#configuring-ignored-files-for-all-repositories-on-your-computer
	# https://git-scm.com/docs/git-config#Documentation/git-config.txt-coreexcludesFile
	excludesfile = ~/.gitignore_global
[init]
	# v2.28.x+ - set the name of the default branch for new repos to "main"
	defaultBranch = main
[commit]
	# Add staged diff to the bottom of the commit message template (when using an editor)
	verbose = true
[merge]
	# Add common ancestor in merge conflict blocks
	# Why is diff3 awesome?  https://blog.nilbus.com/take-the-pain-out-of-git-conflict-resolution-use-diff3/
	conflictstyle = diff3
[rerere]
	enabled = true
[submodule]
	# Have commands recurse into submodules by default - this applies to commands like checkout, fetch, grep, pull, push, ...
	# https://git-scm.com/docs/git-config#Documentation/git-config.txt-submodulerecurse
	recurse = true
[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault

	# Default branch to push to is the tracking (upstream) branch
	# default = upstream
	# Default branch to push to is a remote branch with the same name as the local branch
	default = current
[rebase]
	# automatically modify the todo list of rebase -i for squash and fixup commits
	autosquash = true
[grep]
	extendRegexp = false
[gc]
	# Housekeep after ~256 loose objects (default is ~6700)
	auto = 256
[gui]
	# disable git gui loose objects warning
	gcwarning = false
[color "status"]
	added = green # default
	changed = red bold # Changed from red
	untracked = yellow # Changed from red

# For aliases, see git-aliases
