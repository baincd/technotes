# Add to ~/.gitconfig

# 1) Execute:
# ln -s ~/wc/technotes/git/setup-git-aliases.gitconfig ~/.git-aliases.gitconfig
#
# 2) Add to ~/.gitconfig:
# [include]
#     path = ~/.git-aliases.gitconfig

[alias]
	diffiw = diff --ignore-space-change --ignore-space-at-eol # Diff Ignore Whitespace
	id = rev-parse --default HEAD # Print the Git ID (by default of head, but you can pass in a commitish ref)
	addall = add -A -v
	commitall = !git addall && git commit
	pushall = !git commitall && git push
	staged = diff --cached
	ffup = merge --ff-only @{u}
	ff = merge --ff-only
	merge2 = merge --strategy-option=patience
	info = show --pretty=fuller --name-status # Show author and committer information and list files changed (but don't show diff)
	s = status --short --branch # Short status
	logd = log --decorate
	logg = log --graph --oneline --date=relative --format=format:'%C(bold blue)%h%C(reset) %C(bold green)%ad%C(reset) %C(bold cyan)%<(8,trunc)%an%C(reset) %s%C(bold yellow)%d%C(reset)'
	logv = log --graph --oneline --date=local --format=format:'%C(bold blue)%h%C(reset) %C(bold green)%ad%C(reset) %C(bold cyan)%an%C(reset) %C(bold yellow)%d%C(reset)%n%w(0,8,8)%B'
	logw = "!f() { gitk \"$@\" & }; f" # Log Window
	commitw = "!f() { git gui \"$@\" & }; f" # Commit Window
	pullr = pull --rebase
	pullm = pull
	pullf = pull --ff-only
	fa = fetch --all --tags
	br = checkout -b # Create and checkout branch ex: git br newbranch   git br newbranch existingbranch
	brr = branch -m # Branch Rename
	track = branch -u # Set tracking (upstream) branch
	untrack = branch --unset-upstream # Unset tracking (upstream) branch
	setdefaultpushremote = config remote.pushdefault
	# Based on alias from https://haacked.com/archive/2014/07/28/github-flow-aliases/
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git --no-pager log --color=always HEAD~1..HEAD --pretty='%C(dim)%h%C(reset) %s:' --stat && echo '' && git reset HEAD~1 --hard
	shallow-clone = clone --depth 1

	branches = branch -a -vv
	tags = tag -l
	remotes = remote -v

	# Take all staged and unstaged changes and immediately fixup the commit passed in (you will need to save the
	# interactive rebase editor)
	fixup-now = "!f() { git addall && git commit --fixup $1 && git rebase -i $1~1 ; }; f"

	# Remove all branches that are merged into the passed in branch/commit (excluding the current branch and the passed in branch)
	rm-merged-branches = "!f() { git fa && git branch --merged \"$1\" | grep -v '\\*' | grep -v \"^ *$1$\" | xargs -n 1 git branch -D ; }; f"

	# Find all commits that have not been cherrypicked onto the branch
	unpicked-cherries = "!f() { git cherry -v $@ | sed -n 's/^+ //p'; }; f"

	feature-start = "!f () {                                                  \
		if test -n \"$(git status --short 2> /dev/null)\"; then                 \
			echo \"\\033[01;31mERROR!\\033[0m Working Copy isn't clean!\";        \
		else                                                                    \
			git fetch --all &&                                                    \
			git br \"$1\" origin/master;                                          \
		fi;                                                                     \
	}; f"

	feature-end = "!f () {                                                           \
		if test -n \"$(git status --short 2> /dev/null)\"; then                        \
			echo \"\\033[01;31mERROR!\\033[0m Working Copy isn't clean!\";               \
		else                                                                           \
			local OLD_BRANCH=\"$(git rev-parse --abbrev-ref HEAD 2> /dev/null)\" &&      \
			git fetch --all &&                                                           \
			(git branch master origin/master 2> /dev/null || true) &&                    \
			git checkout master &&                                                       \
			(git ffup || true)  &&                                                       \
			git branch -D \"$OLD_BRANCH\";                                               \
		fi;                                                                            \
	}; f"

	qstash = "!f() {                                                                                             \
		if test -z \"$(git status --short 2> /dev/null)\"; then                                                    \
			echo -e \"\\033[01;31mERROR!\\033[0m: No changes to stash!\";                                            \
		else                                                                                                       \
			git add -A &&                                                                                            \
			git commit -qm \"WIP! $1\" &&                                                                            \
			git --no-pager log --color=always --oneline HEAD~1..HEAD --pretty=\"%C(dim)%h%C(reset) %s\" --stat;      \
    fi;                                                                                                        \
	}; f"

	qunstash = "!f() {                                                                                          \
		local HEAD_WIP=\"$(git log HEAD~1..HEAD --format='%H' --grep '^WIP')\";                                   \
		if test -z $HEAD_WIP; then                                                                                \
			echo \"\\033[01;31mERROR!\\033[0m Head not a WIP\";                                                     \
		else                                                                                                      \
			if test \"${1}\" = \"--all\"; then                                                                      \
				local NEW_HEAD=\"$(git log HEAD --format='%H' --grep '^WIP' --invert-grep | head -1)\";               \
			else                                                                                                    \
				local NEW_HEAD=\"HEAD~1\";                                                                            \
			fi &&                                                                                                   \
			git reset $NEW_HEAD >> /dev/null &&                                                                     \
			local MARKER=\"##-##-##-##-##\" &&                                                                      \
			git log --color=always HEAD..$HEAD_WIP --pretty=\"Unstashed: %C(dim)%h%C(reset) %C(bold green)${MARKER}%ad${MARKER}%C(reset) %s\" | sed -r \"s/${MARKER}(.{16}).*${MARKER}/\\1/\" ; \
		fi;                                                                                                       \
	}; f"

	qunstashall = "!git qunstash --all"

	# Remove files that should not be tracked from the index, fix line endings and permissions
	hard-reset-index = "!f () {                                                        \
			if test -n \"$(git status --short 2> /dev/null)\"; then                        \
				echo \"\\033[01;31mERROR!\\033[0m Working Copy isn't clean!\";               \
			else                                                                           \
				git rm -r -q --cached . &&                                                   \
				git add . ;                                                                  \
			fi;                                                                            \
		}; f"

	# Cache SSH credentials
	# setup in ~/.bashrc
	# alias ssh-cache='eval `ssh-agent` && ssh-add'
