################################################################################
# # Chris' Awesome Git Aliases                                                 #
#                                                                              #
# Very useful, helpful, and AWESOME! git aliases.  View the file contents to   #
# see git aliases defined.                                                     #
#                                                                              #
# ## Setup Option 1: Symlink to git repo and include in ~/.gitconfig           #
# 1. Create `~/.git-aliases.gitconfig` symlink with the following command      #
#   `ln -s ~/wc/technotes/git/setup-git-aliases.gitconfig ~/.git-aliases.gitconfig` #
# 2. Create `~/.git-aliases.bash` symlink with the following command           #
#   `ln -s ~/wc/technotes/git/git-bash-aliases.bash ~/.git-aliases.bash`       #
# 3. Add to ~/.gitconfig:                                                      #
# ```                                                                          #
# [include]                                                                    #
#     path = ~/.git.gitconfig                                                  #
# ```                                                                          #
#                                                                              #
# ## Setup Option 2: Save files and include in ~/.gitconfig                    #
# 1. Save this file to `~/.git-aliases.gitconfig`                              #
# 2. Save `git-bash-aliases.bash` to `~/.git-aliases.bash`                     #
# 3. Execute `chmod u+x ~/.git-aliases.bash`                                   #
# 4. Add to ~/.gitconfig:                                                      #
# ```                                                                          #
# [include]                                                                    #
#     path = ~/.git.gitconfig                                                  #
# ```                                                                          #
#                                                                              #
# ## Setup Option 3: Add directly to ~/.gitconfig                              #
# 1. Copy contents of this file directly into ~/.gitconfig                     #
# 2. Save `git-bash-aliases.bash` to `~/.git-aliases.bash`                     #
# 3. Execute `chmod u+x ~/.git-aliases.bash`                                   #
################################################################################

[feature-alias]
  # The feature-* aliases use feature-alias.main-branch to determine where to branch from and return to.
  # This is the global value.
	#   - To set a different value on a single repo, run command `git config-repo-main-branch <new-mainline-branch>`
	#   - To reset the repo to use the default, run command `git unconfig-repo-main-branch`
	main-branch = master
[alias]
  git = "!f() { cd -- ${GIT_PREFIX:-.} && git \"$@\" ; }; f" # Fix when you type `git git status` BWAHAHAHAHA
  aliases = "!f() { git config --get-regexp '^alias\\.' | sed -rne 's/^alias\\.([^ ]*).*$/\\1/p' | sort ; }; f" # List all aliases configured
  alias = "!f() { git config --get-regexp \"^alias\\.${1}\\b\" | sed -rne \"s/^alias\\.${1}\\s//p\" ; }; f" # Show the git alias command.  Usage: `git alias diffiw`
  init-with-commit = "!f() { git init && git commit --allow-empty -m 'Initial Commit' ; }; f" # Init repo with an initial empty commit

  logw = "!f() { cd -- ${GIT_PREFIX:-.} && gitk \"$@\" & }; f" # Log GUI - also accepts many parameters of `git log`
  commitw = "!f() { cd -- ${GIT_PREFIX:-.} && git gui \"$@\" & }; f" # Commit GUI
	showw = "!f() { git logw ${1:-HEAD} `git rev-parse --verify -q ^${1:-HEAD}^1` `git rev-parse --verify -q ^${1:-HEAD}^2` ; }; f" # Show in GUI only a single commit

  id = rev-parse --default HEAD # Print the Git ID (by default of head, but you can pass in a commitish ref)
  info = show --pretty=fuller --name-status # Show author and committer information and list files changed (but don't show diff)

  logd = log --decorate # Log Decorated with branch information
  logg = log --graph --oneline --date=relative --format=format:'%C(bold blue)%h%C(reset) %C(bold green)%ad%C(reset) %C(bold cyan)%<(8,trunc)%an%C(reset) %s%C(bold yellow)%d%C(reset)' # Log Graph
  logv = log --graph --oneline --date=local --format=format:'%C(bold blue)%h%C(reset) %C(bold green)%ad%C(reset) %C(bold cyan)%an%C(reset) %C(bold yellow)%d%C(reset)%n%w(0,8,8)%B' # Log Verbose Graph

  addall = add -A -v # Add all files to staging area
  commitall = !git addall && git commit # Commit all changes
  pushall = !git commitall && git push # Commit all changes and push
  fixup-now = "!f() { local COMMIT=`git id $1` && git addall && git commit --fixup $COMMIT && git rebase -i $COMMIT~1 ; }; f" # Take all staged and unstaged changes and immediately fixup the commit passed in (you will need to save the interactive rebase editor)

  s = status --short --branch # Short status
  sv = status # Verbose status
  staged = diff --cached # Show staged changes
  diffiw = diff --ignore-space-change --ignore-space-at-eol # Diff Ignore Whitespace
  conflicts = "!f() { cd -- ${GIT_PREFIX:-.} && git -c color.status=always status --short | sed -nr '/^[^ A-Z]*(U[DAU]|[DAU]U|AA|DD)/p' ; }; f" # List all conflict files
	conflict = !~/.git-aliases.bash conflict # Return a specific conflict file (if 1-99, return that line number.  Else, return first that matches any of the text)

	file-mod = !~/.git-aliases.bash file-mod # Return a specific modified file (if 1-99, return that line number.  Else, return first that matches any of the text)
	fm = ! git file-mod

  ff = merge --ff-only # Fast Forward branch to another branch (Usage: `git ff origin/anotherbranch`)
  ffup = merge --ff-only @{u} # Fast Forward branch to upstream branch
  merge2 = merge --strategy-option=patience # Merge using a different strategy

  f = fetch --all --tags # Fetch All
  pullr = pull --rebase # Pull using rebase
  pullm = pull # Pull using Merge
  pullf = pull --ff-only # Pull using Fast Forward
  pushup = -c push.default=upstream push # Push to the upstream branch

  br = checkout -b # Create and checkout branch ex: `git br newbranch` or  `git br newbranch existingbranch`
  brr = branch -m # Branch Rename
  track = branch -u # Set tracking (upstream) branch
  untrack = branch --unset-upstream # Unset tracking (upstream) branch

  # Do a hard reset, but save all changes in the working copy to the reflog
  # Based on alias from https://haacked.com/archive/2014/07/28/github-flow-aliases/
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git --no-pager log --color=always HEAD~1..HEAD --pretty='%C(dim)%h%C(reset) %s:' --stat && echo '' && git reset HEAD~1 --hard

  # Execute a git command recursively on all git repos in subdirectories
  rec  = "!f() { cd -- ${GIT_PREFIX:-.} && find -name .git -type d -exec echo \"\" \\; -exec echo --- \\; -exec echo {} \\; -execdir git $@ \\; ; }; f"
  # Execute a git command recursively on all git repos in subdirectories, prompting for each repo
  recp = "!f() { cd -- ${GIT_PREFIX:-.} && find -name .git -type d -exec echo \"\" \\; -exec echo --- \\;                   -okdir   git $@ \\; ; }; f"
  rpullf = !git rec pullf # Recursively pull all repos in subdirectories
  rfetch = !git rec f # Recursively fetch all repos in subdirectories

	# List branches, remote-branches (recent or all), or tags (recent or all) in chronological order (by committer date)
	# in colorized format
	# All these commands also support
	#  --(no-)contains COMMITISH : branchs/tags whose history includes COMMITSH (COMMITISH is merged into)
	#  --(no-)merged  COMMITISH : branches/tags within COMMITISH (merged into COMMITISH)
	# https://git-scm.com/docs/git-for-each-ref#Documentation/git-for-each-ref.txt---mergedltobjectgt
  for-each-ref-list = for-each-ref --color --sort=-committerdate --format='%(color:green)%(committerdate:format-local:%Y-%m-%dT%H)%(*committerdate:format-local:%Y-%m-%dT%H)%(color:reset) %(color:yellow)%(if)%(objectname)%(then)%(objectname:short)%(else)%(objectname:short)%(end)%(color:reset)%(color:bold green)%(HEAD)%(color:reset)%(color:bold cyan)%(refname:short)%(color:reset)%(if)%(upstream)%(then) %(color:magenta)(%(upstream:lstrip=2)%(color:reset)%(if)%(upstream:track)%(then) %(color:red)%(upstream:track)%(color:reset)%(end)%(color:magenta))%(color:reset)%(end): %(if)%(*contents)%(then)%(*contents:subject)%(else)%(contents:subject)%(end) %(color:dim)(%(if)%(*authorname)%(then)%(*authorname)%(else)%(authorname)%(end))%(color:reset)'
  branches      = "!f() { git for-each-ref-list refs/heads/ \"$@\" | sed -re 's/\\[(behind [0-9]+)\\]/[ahead 0, \\1]/' -re 's/\\[(ahead [0-9]+)\\]/[\\1, behind 0]/' -re 's/\\[(ahead ([0-9]+))?(, )?(behind ([0-9]+))?\\]/+\\2\\/-\\5/' ; }; f"
  rbranches-all = !git for-each-ref-list refs/remotes/
  rbranches     = "!f() { echo 10 Most Recent Remote Branches && git rbranches-all --count 10 \"$@\" ; }; f"
  tags-all      = "!f() { git for-each-ref-list refs/tags/ \"$@\" | sort -r ; }; f"
  tags          = "!f() { echo 10 Most Recent Tags && git tags-all \"$@\" | head -n 10 ; }; f"
  remotes = "!f() { TAB='	' ; git remote -v | sed -re \"s/^(.*)${TAB}/\\x1b[36;1m\\1\\x1b[0m${TAB}/\" | sed -re '$!N; s/(.*) \\(fetch\\)\\n\\1 \\(push\\)/\\1/' | sed -re \"$!N; s/(.*)${TAB}([^ ]*) \\(fetch\\)\\n\\1${TAB}([^ ]*) \\(push\\)/\\1\\n  fetch: \\2\\n  push:  \\3/\" ; }; f" # List all remotes

	branches-co  = !~/.git-aliases.bash branches-co # Checkout a specific branch (if 1-99, checkout that line number.  Else, checkout the first branch name that matches)
	rbranches-co = !~/.git-aliases.bash rbranches-co # Checkout a specific remote branch (if 1-99, checkout that line number.  Else, checkout the first remote branch name that matches)
	tags-co      = !~/.git-aliases.bash tags-co      # Checkout a specific tag (if 1-99, checkout that line number.  Else, checkout the first tag that matches)

  # Remove all branches that are merged into the passed in branch/commit (excluding the current branch and the passed in branch)
  rm-merged-branches = "!f() { git f && git branch --merged \"$1\" | grep -v '\\*' | grep -v \"^ *$1$\" | xargs -n 1 git branch -D ; }; f"

  # Find all commits that have not been cherrypicked onto the branch
  unpicked-cherries = "!f() { git cherry -v $@ | sed -n 's/^+ //p'; }; f"

  # Find the merge commit that includes a specific commit
  # Usage:
  #   $ git find-merge <COMMIT_ID>  # Defaults to searching HEAD
  #   $ git find-merge <COMMIT_ID> <BRANCH>
  # Show merge will show the merge author and details
  # Reference: https://stackoverflow.com/a/30998048
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"


  # Clone only the HEAD commit (no history will be cloned)
  shallow-clone = clone --depth 1

  # Display useful tips for log command search options
  helpme-log-search = !~/.git-aliases.bash helpme-log-search

  # Display useful tips for log command output options
  helpme-log-output = !~/.git-aliases.bash helpme-log-output

  # Display useful tips for viewing diffs of merge commits in log command
  helpme-log-merge-diff = !~/.git-aliases.bash helpme-log-merge-diff

  config-repo-main-branch = config feature-alias.main-branch
  unconfig-repo-main-branch = config --unset feature-alias.main-branch
  # Fetch and create a new branch off of origin/main-branch (see feature-alias.main-branch)
  # Usage: `git feature-start my-new-feature`
  feature-start = "!f () {                                                      \
    cd -- ${GIT_PREFIX:-.};                                                     \
    if test -n \"$(git status --short 2> /dev/null)\"; then                     \
      `which echo` -e \"\\033[01;31mERROR!\\033[0m Working Copy isn't clean!\"; \
    else                                                                        \
      local MAINLINE_BRANCH=\"$(git config feature-alias.main-branch)\" &&      \
      git fetch --all &&                                                        \
      git br \"$1\" origin/$MAINLINE_BRANCH;                                    \
    fi;                                                                         \
  }; f"

  # Fetch, checkout main-branch (create if necessary), and delete current feature branch (see feature-alias.main-branch)
  feature-end = "!f () {                                                            \
    cd -- ${GIT_PREFIX:-.};                                                         \
    if test -n \"$(git status --short 2> /dev/null)\"; then                         \
      `which echo` -e \"\\033[01;31mERROR!\\033[0m Working Copy isn't clean!\";     \
    else                                                                            \
      local OLD_BRANCH=\"$(git rev-parse --abbrev-ref HEAD 2> /dev/null)\" &&       \
      local MAINLINE_BRANCH=\"$(git config feature-alias.main-branch)\" &&          \
      git fetch --all &&                                                            \
      (git branch $MAINLINE_BRANCH origin/$MAINLINE_BRANCH 2> /dev/null || true) && \
      git checkout $MAINLINE_BRANCH &&                                              \
      (git ffup || true)  &&                                                        \
      git branch -D \"$OLD_BRANCH\";                                                \
    fi;                                                                             \
  }; f"

  # Equivalent to `git feature-end && git feature-start <branchname>`
  feature-swap = "!f() { git feature-end &&  git feature-start "$@" ; }; f"

  # Quick Stash - Commit all changes with the commit message starting with "WIP!"
  # Usage: `git qstash` OR `git qstash "Added FooBar"`
  # Can be used to commit frequently so code can be rolled back quickly to a good state
  # or to store changes on the branch temporarily so a different branch can be checked out
  # see qunstash
  qstash = "!f() {                                                                                             \
    cd -- ${GIT_PREFIX:-.};                                                                                    \
    if test -z \"$(git status --short 2> /dev/null)\"; then                                                    \
      `which echo` -e \"\\033[01;31mERROR!\\033[0m: No changes to stash!\";                                    \
    else                                                                                                       \
      git add -A &&                                                                                            \
      git commit -qm \"WIP! $1\" &&                                                                            \
      git --no-pager log --color=always --oneline HEAD~1..HEAD --pretty=\"%C(dim)%h%C(reset) %s\" --stat;      \
    fi;                                                                                                        \
  }; f"

  # Remove commits added by qstash, leaving changes to working copy
  # Usage:
  #    `git qunstash` - remove only the HEAD commit
  #    `git qunstash --all` - remove all consecutive qstash'd commits
  qunstash = "!f() {                                                                                          \
    cd -- ${GIT_PREFIX:-.};                                                                                   \
    local HEAD_WIP=\"$(git log HEAD~1..HEAD --format='%H' --grep '^WIP')\";                                   \
    if test -z $HEAD_WIP; then                                                                                \
      `which echo` -e \"\\033[01;31mERROR!\\033[0m Head not a WIP\";                                          \
    else                                                                                                      \
      if test \"${1}\" = \"--all\"; then                                                                      \
        local NEW_HEAD=\"$(git log HEAD --format='%H' --grep '^WIP' --invert-grep | head -1)\";               \
      else                                                                                                    \
        local NEW_HEAD=\"HEAD~1\";                                                                            \
      fi &&                                                                                                   \
      git reset $NEW_HEAD >> /dev/null &&                                                                     \
      local MARKER=\"##-##-##-##-##\" &&                                                                      \
      git log --color=always HEAD..$HEAD_WIP --pretty=\"Unstashed: %C(dim)%h%C(reset) %C(bold green)${MARKER}%ad${MARKER}%C(reset) %s\" | sed -r \"s/${MARKER}(.{16}).*${MARKER}/\\1/\" ; \
    fi;                                                                                                       \
  }; f"

  qunstashall = "!git qunstash --all"

  # Remove files that should not be tracked from the index, fix line endings and permissions
  hard-reset-index = "!f () {                                                        \
      if test -n \"$(git status --short 2> /dev/null)\"; then                        \
        `which echo` -e \"\\033[01;31mERROR!\\033[0m Working Copy isn't clean!\";    \
      else                                                                           \
        git rm -r -q --cached . &&                                                   \
        git add . ;                                                                  \
      fi;                                                                            \
    }; f"

  # Cache SSH credentials
  # setup in ~/.bashrc
  # alias ssh-cache='eval `ssh-agent` && ssh-add'
